package com.oww.gateway.filter;

import com.oww.gateway.util.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

@Component
public class JwtAuthenticationFilter extends AbstractGatewayFilterFactory<JwtAuthenticationFilter.Config> {

    @Autowired
    private JwtUtil jwtUtil;

    public JwtAuthenticationFilter() {
        super(Config.class);
    }

    @Override
    public GatewayFilter apply(Config config) {
        return (exchange, chain) -> {

            // Ïø†ÌÇ§ÏóêÏÑú jwt-token ÏùΩÍ∏∞
            String cookieToken = exchange.getRequest()
                    .getCookies()
                    .getFirst("jwt-token") != null ?
                    exchange.getRequest()
                            .getCookies()
                            .getFirst("jwt-token")
                            .getValue() : null;

            // Authorization Ìó§Îçî Í∞ÄÏ†∏Ïò§Í∏∞
            String authHeader = exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION);

            // Ìó§Îçî ÏóÜÏúºÎ©¥ Ïø†ÌÇ§ÏóêÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
            if ((authHeader == null || !authHeader.startsWith("Bearer ")) && cookieToken != null) {
                authHeader = "Bearer " + cookieToken;
            }

            if (authHeader == null || !authHeader.startsWith("Bearer ")) {
                return onError(exchange, "Missing or invalid Authorization header", HttpStatus.UNAUTHORIZED);
            }

            String token = authHeader.substring(7);

            try {
                if (!jwtUtil.validateToken(token)) {
                    return onError(exchange, "Invalid JWT token", HttpStatus.UNAUTHORIZED);
                }

                String username = jwtUtil.getUsernameFromToken(token);
                String role = jwtUtil.extractRole(token);
                
                // ‚úÖ Í∞ÑÎã®ÌïòÍ≤å Ìïú Ï§ÑÎ°ú Ï≤òÎ¶¨
                final String userIdStr = "0"; // ÏùºÎã® Í∏∞Î≥∏Í∞íÏúºÎ°ú Í≥†Ï†ï

                // Downstream ÏÑúÎπÑÏä§Î°ú Ìó§Îçî Ï∂îÍ∞Ä
                ServerWebExchange mutatedExchange = exchange.mutate()
                        .request(r -> r.header("Authorization", "Bearer " + token)
                                .header("X-User-Id", userIdStr)
                                .header("X-Username", username)
                                .header("X-User-Role", role))
                        .build();

                System.out.println("üîç JWT ÌïÑÌÑ∞ - Ìó§Îçî Ï†ÑÎã¨:");
                System.out.println("   X-User-Id: " + userIdStr);
                System.out.println("   X-Username: " + username);
                System.out.println("   X-User-Role: " + role);

                return chain.filter(mutatedExchange);

            } catch (Exception e) {
                System.err.println("‚ùå JWT ÌÜ†ÌÅ∞ Í≤ÄÏ¶ù Ïã§Ìå®: " + e.getMessage());
                return onError(exchange, "JWT token validation failed", HttpStatus.UNAUTHORIZED);
            }
        };
    }

    private Mono<Void> onError(ServerWebExchange exchange, String errorMessage, HttpStatus status) {
        exchange.getResponse().setStatusCode(status);
        exchange.getResponse().getHeaders().add("Content-Type", "application/json");

        String body = String.format("{\"error\": \"%s\", \"message\": \"%s\"}",
                status.getReasonPhrase(), errorMessage);

        return exchange.getResponse().writeWith(
                Mono.just(exchange.getResponse().bufferFactory().wrap(body.getBytes()))
        );
    }

    public static class Config {
    }
}
// 1. SafeboxMapper.java (인터페이스)
package oww.banking.mapper;

import oww.banking.vo.SafeboxVO;
import oww.banking.vo.SafeboxGoalVO;
import oww.banking.vo.SafeboxHistoryVO;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

@Mapper
public interface SafeboxMapper {
    
    // Safebox 관련
    void createSafebox(SafeboxVO safebox);
    SafeboxVO findSafeboxByEmail(String userEmail);
    void updateSafeboxBalance(Map<String, Object> params);
    boolean existsByEmail(String userEmail);
    
    // SafeboxGoal 관련
    void createSafeboxGoal(SafeboxGoalVO goal);
    List<SafeboxGoalVO> findGoalsBySafeboxId(int safeboxId);
    SafeboxGoalVO findGoalById(int goalId);
    
    // SafeboxHistory 관련
    void createSafeboxHistory(SafeboxHistoryVO history);
    List<SafeboxHistoryVO> findHistoryByGoalId(int goalId);
    BigDecimal getTotalSavedAmountByGoalId(int goalId);
    List<SafeboxHistoryVO> findHistoryByUserEmail(String userEmail);
}

// 2. 시퀀스 생성 SQL (Oracle 기준)
/*
-- 세이프박스 시퀀스
CREATE SEQUENCE SAFEBOX_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

-- 정기저금 목표 시퀀스  
CREATE SEQUENCE SAFEBOX_GOAL_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

-- 저축 내역 시퀀스
CREATE SEQUENCE SAFEBOX_HISTORY_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
*/

// 3. SafeboxScheduler.java (자동 저축을 위한 스케줄러)
package oww.banking.scheduler;

import oww.banking.service.SafeboxService;
import oww.banking.vo.SafeboxGoalVO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.List;

@Component
public class SafeboxScheduler {

    @Autowired
    private SafeboxService safeboxService;

    /**
     * 매일 자정에 실행되는 자동 저축 스케줄러
     */
    @Scheduled(cron = "0 0 0 * * ?") // 매일 자정
    public void executeAutoSaving() {
        try {
            // 모든 활성 저축 목표 조회 (이 메서드는 Service에 추가 구현 필요)
            // List<SafeboxGoalVO> activeGoals = safeboxService.getActiveGoals();
            
            // for (SafeboxGoalVO goal : activeGoals) {
            //     if (shouldExecuteToday(goal)) {
            //         BigDecimal amount = calculateDailyAmount(goal);
            //         safeboxService.executeAutoSaving(goal.getGoalId(), amount);
            //     }
            // }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private boolean shouldExecuteToday(SafeboxGoalVO goal) {
        LocalDate today = LocalDate.now();
        return !today.isBefore(goal.getStartDate()) && !today.isAfter(goal.getEndDate());
    }

    private BigDecimal calculateDailyAmount(SafeboxGoalVO goal) {
        LocalDate today = LocalDate.now();
        long remainingDays = ChronoUnit.DAYS.between(today, goal.getEndDate());
        
        if (remainingDays <= 0) {
            return BigDecimal.ZERO;
        }

        // 현재까지 저축한 금액을 빼고 남은 금액을 남은 일수로 나누기
        BigDecimal savedAmount = safeboxService.getTotalSavedAmount(goal.getGoalId());
        BigDecimal remainingAmount = goal.getTargetAmount().subtract(savedAmount);
        
        return remainingAmount.divide(BigDecimal.valueOf(remainingDays), 2, BigDecimal.ROUND_UP);
    }
}

// 4. 에러 처리를 위한 Exception 클래스들
package oww.banking.exception;

public class SafeboxException extends RuntimeException {
    public SafeboxException(String message) {
        super(message);
    }
    
    public SafeboxException(String message, Throwable cause) {
        super(message, cause);
    }
}

public class InsufficientBalanceException extends SafeboxException {
    public InsufficientBalanceException(String message) {
        super(message);
    }
}

public class SafeboxNotFoundException extends SafeboxException {
    public SafeboxNotFoundException(String message) {
        super(message);
    }
}
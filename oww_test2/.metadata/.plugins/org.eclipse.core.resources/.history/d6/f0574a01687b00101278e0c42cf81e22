package oww.banking.config;

import java.io.IOException;
import java.util.Collections;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;
import org.springframework.web.util.WebUtils;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class GatewayUserInfoFilter extends OncePerRequestFilter {

    private static final Logger log = LoggerFactory.getLogger(GatewayUserInfoFilter.class);

    @Override
    protected boolean shouldNotFilter(HttpServletRequest request) {
        String path = request.getRequestURI();
        // OAuth2 로그인, 토큰 리프레시 등 예외 경로
        return path.startsWith("/auth/oauth2/") || path.startsWith("/login/oauth2/");
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain) throws ServletException, IOException {

        String username = request.getHeader("X-Username");
        String role = request.getHeader("X-User-Role");

        // 1️⃣ Gateway 헤더 있으면 기존 인증
        if (username != null && role != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            SimpleGrantedAuthority authority = new SimpleGrantedAuthority("ROLE_" + role);
            UsernamePasswordAuthenticationToken authToken =
                    new UsernamePasswordAuthenticationToken(username, null, Collections.singletonList(authority));
            SecurityContextHolder.getContext().setAuthentication(authToken);
            log.info("✅ Gateway 헤더 인증 완료: {}", username);
        }

        // 2️⃣ 헤더 없으면 JWT 쿠키 인증
        else if (SecurityContextHolder.getContext().getAuthentication() == null) {
            Cookie jwtCookie = WebUtils.getCookie(request, "jwt-token");
            if (jwtCookie != null) {
                String token = jwtCookie.getValue();
                try {
                    Claims claims = Jwts.parser()
                            .setSigningKey("비밀키")  // 실제 비밀키 사용
                            .parseClaimsJws(token)
                            .getBody();

                    username = claims.get("name", String.class);
                    role = claims.get("role", String.class);

                    SimpleGrantedAuthority authority = new SimpleGrantedAuthority("ROLE_" + role);
                    UsernamePasswordAuthenticationToken authToken =
                            new UsernamePasswordAuthenticationToken(username, null, Collections.singletonList(authority));
                    SecurityContextHolder.getContext().setAuthentication(authToken);
                    log.info("✅ JWT 인증 완료: {}", username);

                } catch (Exception e) {
                    log.warn("❌ JWT 검증 실패: {}", e.getMessage());
                }
            }
        }

        filterChain.doFilter(request, response);
    }
}

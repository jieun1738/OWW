package oww.banking.config;

import oww.banking.filter.GatewayUserInfoFilter;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.Arrays;

@Configuration
@EnableWebSecurity
public class BankingSecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            // CSRF 비활성화
            .csrf(csrf -> csrf.disable())

            // CORS 설정
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))

            // 세션 사용 안함
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))

            // Form 로그인 비활성화
            .formLogin(form -> form.disable())

            // HTTP Basic 완전 비활성화
            .httpBasic(basic -> basic.disable())

            // 모든 요청 허용, Gateway에서 인증 처리
            .authorizeHttpRequests(auth -> auth
                    .requestMatchers("/health", "/actuator/**").permitAll()
                    .anyRequest().permitAll()
            )

            // 인증 실패 시 Banking Main으로 리다이렉트 (401 팝업 방지)
            .exceptionHandling(ex -> ex
                    .authenticationEntryPoint((req, res, exAuth) -> res.sendRedirect("/banking_main"))
            )

            // Gateway 헤더 처리 필터 추가
            .addFilterBefore(new GatewayUserInfoFilter(), UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowedOrigins(Arrays.asList(
                "http://localhost:8201", // Gateway
                "http://localhost:8202", // Login Service
                "http://localhost:3000"  // Frontend
        ));
        config.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        config.setAllowedHeaders(Arrays.asList("*"));
        config.setAllowCredentials(true);
        config.setMaxAge(3600L);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);
        return source;
    }
}

package oww.banking.config;

import java.io.IOException;
import java.util.Collections;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

/**
 * ✅ Gateway에서 전달받은 헤더 정보로 SecurityContext 설정
 * JWT 재검증 없이 Gateway를 신뢰하여 인증 처리
 */
public class GatewayUserInfoFilter extends OncePerRequestFilter {

    private static final Logger log = LoggerFactory.getLogger(GatewayUserInfoFilter.class);

    @Override
    protected boolean shouldNotFilter(HttpServletRequest request) {
        String path = request.getRequestURI();
        // 인증이 필요없는 경로들
        return path.startsWith("/health") || 
               path.startsWith("/actuator") ||
               path.startsWith("/auth/oauth2/") || 
               path.startsWith("/login/oauth2/");
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain) throws ServletException, IOException {

        // ✅ Gateway에서 전달한 사용자 정보 헤더 읽기
        String userId = request.getHeader("X-User-Id");
        String username = request.getHeader("X-Username");
        String userRole = request.getHeader("X-User-Role");

        // ✅ Gateway 헤더가 있으면 SecurityContext에 인증 정보 설정
        if (userId != null && username != null && userRole != null && 
            SecurityContextHolder.getContext().getAuthentication() == null) {
            
            try {
                // ROLE_ 접두사 처리
                String roleWithPrefix = userRole.startsWith("ROLE_") ? userRole : "ROLE_" + userRole;
                SimpleGrantedAuthority authority = new SimpleGrantedAuthority(roleWithPrefix);
                
                // 인증 토큰 생성 (JWT 재검증 없이)
                UsernamePasswordAuthenticationToken authToken = 
                    new UsernamePasswordAuthenticationToken(username, null, Collections.singletonList(authority));
                
                // SecurityContext에 설정
                SecurityContextHolder.getContext().setAuthentication(authToken);
                
                log.info("✅ Gateway 신뢰 인증 완료: {} (ID: {}, Role: {})", username, userId, userRole);
                
            } catch (Exception e) {
                log.error("❌ Gateway 헤더 처리 중 오류: {}", e.getMessage());
                SecurityContextHolder.clearContext();
            }
        } else if (userId == null || username == null || userRole == null) {
            log.warn("⚠️ Gateway 헤더 누락 - User-Id: {}, Username: {}, Role: {}", userId, username, userRole);
        }

        filterChain.doFilter(request, response);
    }
}
package com.oww.login.controller;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.oww.login.entity.User;
import com.oww.login.repository.UserRepository;
import com.oww.login.util.JwtUtil;

import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Controller
@RequestMapping("/oauth2")
@RequiredArgsConstructor
@Slf4j
public class OAuth2Controller {

   private final UserRepository userRepository;
   private final JwtUtil jwtUtil;

   @Value("${app.oauth2.redirect-uri:http://localhost:8201/?login=success}")
   private String redirectUri;

   @GetMapping("/success")
   public String oauth2LoginSuccess(Authentication authentication, HttpServletResponse response) {
       try {
           OAuth2AuthenticationToken token = (OAuth2AuthenticationToken) authentication;
           OAuth2User oauth2User = token.getPrincipal();
           
           // OAuth2User에서 직접 정보 추출
           String email = oauth2User.getAttribute("email");
           String name = oauth2User.getAttribute("name");
           
           if (email == null || name == null) {
               log.error("필수 사용자 정보가 누락됨: email={}, name={}", email, name);
               return "redirect:/oauth2/failure";
           }
           
           // DB에서 사용자 정보 조회
           User user = userRepository.findByEmail(email)
               .orElseThrow(() -> new RuntimeException("사용자를 찾을 수 없습니다: " + email));
           
           // JWT 토큰 생성
           String jwtToken = jwtUtil.generateToken(user.getUserNo(), user.getName());
           String refreshToken = jwtUtil.generateRefreshToken(user.getUserNo(), user.getName());
           
           // JWT 쿠키 설정
           Cookie jwtCookie = new Cookie("jwt-token", jwtToken);
           jwtCookie.setHttpOnly(false);
           jwtCookie.setPath("/");
           jwtCookie.setMaxAge(24 * 60 * 60);
           jwtCookie.setSecure(false);
           response.addCookie(jwtCookie);
           
           // Refresh 토큰 쿠키 설정
           Cookie refreshCookie = new Cookie("refresh-token", refreshToken);
           refreshCookie.setHttpOnly(false);
           refreshCookie.setPath("/");
           refreshCookie.setMaxAge(7 * 24 * 60 * 60);
           refreshCookie.setSecure(false);
           response.addCookie(refreshCookie);
           
           log.info("OAuth2 로그인 성공: {} - JWT 토큰 설정 완료", email);
           log.info("JWT 쿠키 설정: 이름={}, 값 길이={}, HttpOnly={}", 
                   jwtCookie.getName(), jwtToken.length(), jwtCookie.isHttpOnly());
           
           return "redirect:" + redirectUri;
           
       } catch (Exception e) {
           log.error("OAuth2 success 처리 중 오류: " + e.getMessage(), e);
           return "redirect:/oauth2/failure";
       }
   }

   @GetMapping("/failure")
   public String oauth2LoginFailure(Model model) {
       log.warn("OAuth2 로그인 실패");
       model.addAttribute("error", "소셜 로그인에 실패했습니다.");
       return "login-result";
   }
}
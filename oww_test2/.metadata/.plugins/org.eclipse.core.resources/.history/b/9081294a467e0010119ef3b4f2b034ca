package com.oww.login.controller;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.oww.login.entity.User;
import com.oww.login.repository.UserRepository;
import com.oww.login.util.JwtUtil;

import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Controller
@RequestMapping("/oauth2")
@RequiredArgsConstructor
@Slf4j
public class OAuth2Controller {

   private final UserRepository userRepository;
   private final JwtUtil jwtUtil;

   // Gateway URL로 고정 - 성공 시 리다이렉트 URL
   @Value("${app.oauth2.redirect-uri:http://localhost:8201/?login=success}")
   private String successRedirectUri;

   @GetMapping("/success")
   public String oauth2LoginSuccess(Authentication authentication, HttpServletResponse response) {
       try {
           log.info("OAuth2 로그인 성공 처리 시작");
           
           OAuth2AuthenticationToken token = (OAuth2AuthenticationToken) authentication;
           OAuth2User oauth2User = token.getPrincipal();
           
           // OAuth2User에서 직접 정보 추출
           String email = oauth2User.getAttribute("email");
           String name = oauth2User.getAttribute("name");
           String providerId = oauth2User.getAttribute("id");
           String provider = token.getAuthorizedClientRegistrationId(); // google, github 등
           
           log.info("OAuth2 사용자 정보: email={}, name={}, provider={}", email, name, provider);
           
           if (email == null || name == null) {
               log.error("필수 사용자 정보가 누락됨: email={}, name={}", email, name);
               return "redirect:" + getFailureRedirectUri("missing_user_info");
           }
           
           // DB에서 사용자 정보 조회 또는 생성
           User user = userRepository.findByEmail(email)
               .orElseThrow(() -> {
                   log.error("사용자를 찾을 수 없습니다: {}", email);
                   return new RuntimeException("사용자를 찾을 수 없습니다: " + email);
               });
           
           // JWT 토큰 생성 - 사용자 정보 포함
           String jwtToken = jwtUtil.generateToken(user.getUserNo(), user.getName());
           String refreshToken = jwtUtil.generateRefreshToken(user.getUserNo(), user.getName());
           
           log.info("JWT 토큰 생성 완료: userNo={}, userName={}", user.getUserNo(), user.getName());
           
           // JWT 쿠키 설정
           setJwtCookie(response, "jwt-token", jwtToken, 24 * 60 * 60); // 24시간
           setJwtCookie(response, "refresh-token", refreshToken, 7 * 24 * 60 * 60); // 7일
           
           log.info("OAuth2 로그인 성공 완료: {} - 리다이렉트: {}", email, successRedirectUri);
           
           // Gateway로 성공 리다이렉트
           return "redirect:" + successRedirectUri;
           
       } catch (Exception e) {
           log.error("OAuth2 success 처리 중 오류: " + e.getMessage(), e);
           return "redirect:" + getFailureRedirect
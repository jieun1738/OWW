package com.oww.login.util;

import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

@Component
public class JwtUtil {

    @Value("${jwt.secret}")
    private String secretKey; // application.properties에서 읽어오기
    
    @Value("${jwt.expiration}")
    private Long accessTokenValidity; // application.properties에서 읽어오기
    
    @Value("${jwt.refresh-expiration}")
    private Long refreshTokenValidity; // application.properties에서 읽어오기

    private Key getSigningKey() {
        return Keys.hmacShaKeyFor(secretKey.getBytes());
    }

    // ===============================
    // 토큰 생성
    // ===============================
    public String generateToken(Long userNo, String username) {
        Map<String, Object> claims = new HashMap<>();
        claims.put("userNo", userNo); // ✅ userNo 로 통일
        claims.put("username", username);
        claims.put("role", "USER"); // Banking 서비스에서 기대하는 role 추가

        System.out.println("🔧 JWT 토큰 생성:");
        System.out.println(" - userNo: " + userNo);
        System.out.println(" - username: " + username);
        System.out.println(" - role: USER");
        System.out.println(" - secretKey 길이: " + secretKey.length());

        return createToken(claims, username, accessTokenValidity);
    }

    public String generateRefreshToken(Long userNo, String username) {
        Map<String, Object> claims = new HashMap<>();
        claims.put("userNo", userNo);
        claims.put("username", username);
        claims.put("token_type", "refresh"); // refresh 토큰임을 명시

        return createToken(claims, username, refreshTokenValidity);
    }

    private String createToken(Map<String, Object> claims, String subject, long validity) {
        return Jwts.builder()
                .setClaims(claims)
                .setSubject(subject)
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + validity))
                .signWith(getSigningKey(), SignatureAlgorithm.HS256)
                .compact();
    }

    // ===============================
    // Claim 추출
    // ===============================
    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    public Long extractUserNo(String token) {
        return extractClaim(token, claims -> claims.get("userNo", Long.class));
    }

    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    public String extractRole(String token) {
        return extractClaim(token, claims -> claims.get("role", String.class));
    }

    private Claims extractAllClaims(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    // ===============================
    // 토큰 검증
    // ===============================
    public Boolean validateToken(String token, String username) {
        final String extractedUsername = extractUsername(token);
        return (extractedUsername.equals(username) && !isTokenExpired(token));
    }

    public Boolean validateToken(String token) {
        try {
            extractAllClaims(token);
            return !isTokenExpired(token);
        } catch (Exception e) {
            return false;
        }
    }

    private Boolean isTokenExpired(String token) {
        final Date expiration = extractClaim(token, Claims::getExpiration);
        return expiration.before(new Date());
    }
}
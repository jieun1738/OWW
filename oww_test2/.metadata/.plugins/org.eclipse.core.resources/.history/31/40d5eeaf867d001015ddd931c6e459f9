package com.oww.login.config;

import com.oww.login.repository.UserRepository;
import com.oww.login.util.JwtUtil;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;
import org.springframework.stereotype.Component;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

@Component
public class OAuth2LoginSuccessHandler extends SimpleUrlAuthenticationSuccessHandler {

    private final JwtUtil jwtUtil;
    private final UserRepository userRepository;

    public OAuth2LoginSuccessHandler(JwtUtil jwtUtil, UserRepository userRepository) {
        this.jwtUtil = jwtUtil;
        this.userRepository = userRepository;
    }

    @Override
    public void onAuthenticationSuccess(HttpServletRequest request,
                                        HttpServletResponse response,
                                        Authentication authentication) throws IOException, ServletException {

        OAuth2User oAuth2User = (OAuth2User) authentication.getPrincipal();

        String email = oAuth2User.getAttribute("email");
        String name = oAuth2User.getAttribute("name");

        System.out.println("🎉 OAuth2 로그인 성공: " + email);

        try {
            Long userNo = userRepository.findByEmailAndIsActiveTrue(email)
                    .orElseThrow(() -> new IllegalArgumentException("사용자를 찾을 수 없습니다."))
                    .getUserNo();

            // JWT 액세스 토큰 생성
            String jwtToken = jwtUtil.generateToken(userNo, name);

            System.out.println("✅ JWT 토큰 생성 완료");
            System.out.println("토큰 길이: " + jwtToken.length());
            System.out.println("토큰 미리보기: " + jwtToken.substring(0, Math.min(50, jwtToken.length())));

            // JWT 액세스 토큰 쿠키 설정
            Cookie jwtCookie = new Cookie("jwt-token", jwtToken);
            jwtCookie.setHttpOnly(false); // JS에서 읽기 가능 (개발용)
            jwtCookie.setPath("/"); // 모든 경로에서 사용 가능
            jwtCookie.setMaxAge(24 * 60 * 60); // 24시간
            jwtCookie.setSecure(false); // HTTP에서도 사용 가능 (개발용)
            response.addCookie(jwtCookie);

            System.out.println("🍪 JWT 쿠키 설정 완료:");
            System.out.println(" - Name: jwt-token");
            System.out.println(" - Path: /");
            System.out.println(" - MaxAge: " + (24 * 60 * 60));
            System.out.println(" - HttpOnly: false");
            System.out.println(" - Secure: false");

            // Refresh 토큰 생성 (수정된 매개변수 사용)
            String refreshToken = jwtUtil.generateRefreshToken(userNo, name);
            Cookie refreshCookie = new Cookie("refresh-token", refreshToken);
            refreshCookie.setHttpOnly(true);
            refreshCookie.setPath("/");
            refreshCookie.setMaxAge(7 * 24 * 60 * 60); // 7일
            refreshCookie.setSecure(false);
            response.addCookie(refreshCookie);

            System.out.println("🍪 Refresh 쿠키 설정 완료");

            // Gateway로 리다이렉트
            String redirectUrl = "http://localhost:8201/?login=success";
            System.out.println("🔄 Gateway로 리다이렉트: " + redirectUrl);

            getRedirectStrategy().sendRedirect(request, response, redirectUrl);

        } catch (Exception e) {
            System.err.println("❌ 로그인 처리 실패: " + e.getMessage());
            e.printStackTrace();
            getRedirectStrategy().sendRedirect(request, response, "http://localhost:8201/?login=error");
        }
    }
}
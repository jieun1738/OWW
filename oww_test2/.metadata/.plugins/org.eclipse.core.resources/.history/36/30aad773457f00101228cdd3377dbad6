<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="oww.banking.mapper.TransferMapper">

    <!-- TransferVO ResultMap -->
    <resultMap id="TransferResultMap" type="oww.banking.vo.TransferVO">
        <id property="transferId" column="transfer_id" />
        <result property="fromAccountId" column="from_account_id" />
        <result property="toAccountId" column="to_account_id" />
        <result property="amount" column="amount" />
        <result property="memo" column="memo" />
        <result property="transferDate" column="transfer_date" javaType="java.time.LocalDateTime" />
        <result property="fromAccountNumber" column="from_account_number" />
        <result property="toAccountNumber" column="to_account_number" />
        <result property="fromUserName" column="from_user_name" />
        <result property="toUserName" column="to_user_name" />
    </resultMap>

    <!-- TransferHistoryVO ResultMap -->
    <resultMap id="TransferHistoryResultMap" type="oww.banking.vo.TransferHistoryVO">
        <id property="txId" column="tx_id" />
        <result property="accountId" column="account_id" />
        <result property="txType" column="tx_type" />
        <result property="amount" column="amount" />
        <result property="memo" column="memo" />
        <result property="txDate" column="tx_date" javaType="java.time.LocalDateTime" />
        <result property="accountNumber" column="account_number" />
        <result property="otherAccountNumber" column="other_account_number" />
        <result property="otherUserName" column="other_user_name" />
    </resultMap>

    <!-- 계좌번호로 계좌 ID 조회 -->
    <select id="findAccountIdByNumber" parameterType="String" resultType="Integer">
        SELECT account_id 
        FROM account 
        WHERE REPLACE(account_number, '-', '') = REPLACE(#{accountNumber}, '-', '')
    </select>

    <!-- 계좌 ID로 잔액 조회 -->
    <select id="getBalanceByAccountId" parameterType="Integer" resultType="java.math.BigDecimal">
        SELECT balance 
        FROM account 
        WHERE account_id = #{accountId}
    </select>

    <!-- 계좌 비밀번호 확인 -->
    <select id="checkAccountPassword" parameterType="map" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
        FROM account 
        WHERE account_id = #{accountId} AND account_password = #{password}
    </select>

    <!-- 잔액 업데이트 -->
    <update id="updateBalance" parameterType="map">
        UPDATE account 
        SET balance = #{balance}
        WHERE account_id = #{accountId}
    </update>

    <!-- 이체 내역 저장 -->
    <insert id="insertTransfer" parameterType="oww.banking.vo.TransferVO">
        <selectKey keyProperty="transferId" resultType="int" order="BEFORE">
            SELECT TRANSFER_SEQ.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO transfer (
            transfer_id,
            from_account_id,
            to_account_id,
            amount,
            memo,
            transfer_date
        ) VALUES (
            #{transferId},
            #{fromAccountId},
            #{toAccountId},
            #{amount},
            #{memo},
            CURRENT_TIMESTAMP
        )
    </insert>

    <!-- 거래내역 저장 -->
    <insert id="insertTransferHistory" parameterType="oww.banking.vo.TransferHistoryVO">
        <selectKey keyProperty="txId" resultType="int" order="BEFORE">
            SELECT TRANSFER_HISTORY_SEQ.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO transfer_history (
            tx_id,
            account_id,
            tx_type,
            amount,
            memo,
            tx_date
        ) VALUES (
            #{txId},
            #{accountId},
            #{txType},
            #{amount},
            #{memo},
            CURRENT_TIMESTAMP
        )
    </insert>

    <!-- 계좌별 거래내역 조회 -->
    <select id="getTransferHistoryByAccountId" parameterType="Integer" resultMap="TransferHistoryResultMap">
        SELECT 
            th.tx_id,
            th.account_id,
            th.tx_type,
            th.amount,
            th.memo,
            th.tx_date,
            a.account_number,
            CASE 
                WHEN th.tx_type = 'TRANSFER_OUT' THEN (
                    SELECT a2.account_number 
                    FROM transfer t 
                    JOIN account a2 ON t.to_account_id = a2.account_id
                    WHERE t.from_account_id = th.account_id 
                    AND t.transfer_date = th.tx_date
                    AND ROWNUM = 1
                )
                WHEN th.tx_type = 'TRANSFER_IN' THEN (
                    SELECT a2.account_number 
                    FROM transfer t 
                    JOIN account a2 ON t.from_account_id = a2.account_id
                    WHERE t.to_account_id = th.account_id 
                    AND t.transfer_date = th.tx_date
                    AND ROWNUM = 1
                )
            END as other_account_number,
            CASE 
                WHEN th.tx_type = 'TRANSFER_OUT' THEN (
                    SELECT u.name 
                    FROM transfer t 
                    JOIN account a2 ON t.to_account_id = a2.account_id
                    JOIN users u ON a2.user_email = u.user_email
                    WHERE t.from_account_id = th.account_id 
                    AND t.transfer_date = th.tx_date
                    AND ROWNUM = 1
                )
                WHEN th.tx_type = 'TRANSFER_IN' THEN (
                    SELECT u.name 
                    FROM transfer t 
                    JOIN account a2 ON t.from_account_id = a2.account_id
                    JOIN users u ON a2.user_email = u.user_email
                    WHERE t.to_account_id = th.account_id 
                    AND t.transfer_date = th.tx_date
                    AND ROWNUM = 1
                )
            END as other_user_name
        FROM transfer_history th
        JOIN account a ON th.account_id = a.account_id
        WHERE th.account_id = #{accountId}
        ORDER BY th.tx_date DESC
    </select>

    <!-- 계좌 정보 조회 (계좌번호로) -->
    <select id="getAccountInfoByNumber" parameterType="String" resultType="map">
        SELECT 
            a.account_id,
            a.account_number,
            a.user_email,
            u.name as user_name
        FROM account a
        JOIN users u ON a.user_email = u.user_email
        WHERE REPLACE(a.account_number, '-', '') = REPLACE(#{accountNumber}, '-', '')
    </select>

<select id="getTransferHistoryByDateRange" resultType="TransferHistoryVO">
    SELECT ... FROM transfer_history th 
    WHERE th.account_id = #{accountId}
    AND th.tx_date >= TO_DATE(#{startDate}, 'YYYY-MM-DD')
    AND th.tx_date <= TO_DATE(#{endDate} || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
    ORDER BY th.tx_date DESC
</select>

</mapper>
package oww.banking.controller;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import oww.banking.service.AccountService;
import oww.banking.service.TransferService;
import oww.banking.vo.AccountVO;
import oww.banking.vo.TransferHistoryVO;

@Controller
@RequestMapping("/banking")
public class TransferController {

    @Autowired
    private AccountService accountService;
    
    @Autowired
    private TransferService transferService;

    /**
     * 이체 1단계 - 내 계좌 정보 표시
     */
    @GetMapping("/transfer_1")
    public String transferStep1(Model model, Authentication authentication) {
        if (authentication == null || !authentication.isAuthenticated()) {
            return "redirect:/";
        }

        try {
            String username = authentication.getName();
            AccountVO account = accountService.getAccountByEmail(username);
            
            if (account == null) {
                model.addAttribute("errorMessage", "계좌 정보를 찾을 수 없습니다.");
                return "redirect:/banking/main";
            }

            model.addAttribute("account", account);
            model.addAttribute("userName", username);
            
            return "transfer/banking_transfer_1";
            
        } catch (Exception e) {
            model.addAttribute("errorMessage", "계좌 정보 조회 중 오류가 발생했습니다.");
            return "redirect:/banking/main";
        }
    }

    /**
     * 이체 2단계 - 받는 계좌 입력 및 이체 금액 입력
     */
    @GetMapping("/transfer_2")
    public String transferStep2(Model model, Authentication authentication) {
        if (authentication == null || !authentication.isAuthenticated()) {
            return "redirect:/";
        }

        try {
            String username = authentication.getName();
            AccountVO account = accountService.getAccountByEmail(username);
            
            if (account == null) {
                model.addAttribute("errorMessage", "계좌 정보를 찾을 수 없습니다.");
                return "redirect:/banking/main";
            }

            model.addAttribute("account", account);
            model.addAttribute("userName", username);
            
            return "transfer/banking_transfer_2";
            
        } catch (Exception e) {
            model.addAttribute("errorMessage", "페이지 로드 중 오류가 발생했습니다.");
            return "redirect:/banking/main";
        }
    }

    /**
     * 계좌번호 유효성 검사 및 계좌 정보 조회
     */
    @PostMapping("/check-account")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> checkAccount(@RequestParam("accountNumber") String accountNumber) {
        Map<String, Object> response = new HashMap<>();
        
        try {
            Object accountInfo = transferService.getAccountInfoByNumber(accountNumber);
            
            if (accountInfo != null) {
                response.put("success", true);
                response.put("accountInfo", accountInfo);
            } else {
                response.put("success", false);
                response.put("message", "존재하지 않는 계좌번호입니다.");
            }
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "계좌 조회 중 오류가 발생했습니다.");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    /**
     * 이체 처리
     */
    @PostMapping("/transfer")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> processTransfer(
            @RequestParam("toAccountNumber") String toAccountNumber,
            @RequestParam("amount") BigDecimal amount,
            @RequestParam("memo") String memo,
            @RequestParam("password") String password,
            Authentication authentication) {
        
        Map<String, Object> response = new HashMap<>();
        
        try {
            if (authentication == null || !authentication.isAuthenticated()) {
                response.put("success", false);
                response.put("message", "인증이 필요합니다.");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }

            String username = authentication.getName();
            AccountVO fromAccount = accountService.getAccountByEmail(username);
            
            if (fromAccount == null) {
                response.put("success", false);
                response.put("message", "계좌 정보를 찾을 수 없습니다.");
                return ResponseEntity.badRequest().body(response);
            }

            // 이체 처리
            String result = transferService.processTransfer(
                fromAccount.getAccountId(), 
                toAccountNumber, 
                amount, 
                memo, 
                password
            );

            if (result.contains("성공적으로")) {
                response.put("success", true);
                response.put("message", result);
                
                // 업데이트된 잔액 정보 반환
                BigDecimal newBalance = transferService.getBalance(fromAccount.getAccountId());
                response.put("newBalance", newBalance);
                
            } else {
                response.put("success", false);
                response.put("message", result);
            }

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "이체 처리 중 오류가 발생했습니다: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    /**
     * 이체 3단계 - 이체 완료 페이지
     */
    @GetMapping("/transfer_3")
    public String transferStep3(Model model, Authentication authentication) {
        if (authentication == null || !authentication.isAuthenticated()) {
            return "redirect:/";
        }

        return "transfer/banking_transfer_3";
    }

    /**
     * 거래내역 조회
     */
    @GetMapping("/history")
    public String transferHistory(Model model, Authentication authentication) {
        if (authentication == null || !authentication.isAuthenticated()) {
            return "redirect:/";
        }

        try {
            String username = authentication.getName();
            AccountVO account = accountService.getAccountByEmail(username);
            
            if (account == null) {
                model.addAttribute("errorMessage", "계좌 정보를 찾을 수 없습니다.");
                return "redirect:/banking/main";
            }

            List<TransferHistoryVO> history = transferService.getTransferHistory(account.getAccountId());
            
            model.addAttribute("account", account);
            model.addAttribute("history", history);
            
            return "transfer/transfer_history";
            
        } catch (Exception e) {
            model.addAttribute("errorMessage", "거래내역 조회 중 오류가 발생했습니다.");
            return "redirect:/banking/main";
        }
    }

    /**
     * AJAX 거래내역 조회
     */
    @GetMapping("/history-data")
    @ResponseBody
    public ResponseEntity<Map<String, Object>> getTransferHistoryData(Authentication authentication) {
        Map<String, Object> response = new HashMap<>();
        
        try {
            if (authentication == null || !authentication.isAuthenticated()) {
                response.put("success", false);
                response.put("message", "인증이 필요합니다.");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }

            String username = authentication.getName();
            AccountVO account = accountService.getAccountByEmail(username);
            
            if (account == null) {
                response.put("success", false);
                response.put("message", "계좌 정보를 찾을 수 없습니다.");
                return ResponseEntity.badRequest().body(response);
            }

            List<TransferHistoryVO> history = transferService.getTransferHistory(account.getAccountId());
            
            response.put("success", true);
            response.put("history", history);
            response.put("account", account);
            
            return ResponseEntity.ok(response);

        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "거래내역 조회 중 오류가 발생했습니다.");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }
}
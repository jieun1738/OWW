package oww.banking.filter;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.Collections;

public class GatewayUserInfoFilter extends OncePerRequestFilter {

    private static final Logger log = LoggerFactory.getLogger(GatewayUserInfoFilter.class);

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain) throws ServletException, IOException {

        // Gateway 헤더 읽기
        String username = request.getHeader("X-Username");
        String role = request.getHeader("X-User-Role");

        log.info("Request URI: {}", request.getRequestURI());
        log.info("Username: {}", username);
        log.info("Role: {}", role);

        if (username != null && role != null) {
            // SecurityContext 인증 정보 세팅
            SimpleGrantedAuthority authority = new SimpleGrantedAuthority("ROLE_" + role);
            UsernamePasswordAuthenticationToken authToken =
                    new UsernamePasswordAuthenticationToken(username, null, Collections.singletonList(authority));
            SecurityContextHolder.getContext().setAuthentication(authToken);
            log.info("✅ User authenticated in SecurityContext: {}", username);
        }

        filterChain.doFilter(request, response);
    }
}

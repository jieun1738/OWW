package oww.banking.controller;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import oww.banking.service.EmailService;

@RestController
@RequestMapping("/public") // public 경로로 변경 - 인증 불필요
public class EmailTestController {

    @Autowired
    private EmailService emailService;
    
    @Autowired
    private JavaMailSender mailSender;
    
    @Value("${spring.mail.username}")
    private String mailUsername;
    
    @Value("${spring.mail.password}")
    private String mailPassword;
    
    @Value("${mail.from.email}")
    private String fromEmail;

    /**
     * 이메일 설정 확인 - 인증 불필요
     */
    @GetMapping("/email-config")
    public ResponseEntity<Map<String, Object>> testEmailConfig() {
        Map<String, Object> response = new HashMap<>();
        
        try {
            System.out.println("🔍 이메일 설정 확인 시작...");
            
            // 1. 설정값 확인
            response.put("mailUsername", mailUsername);
            response.put("mailPassword", mailPassword != null ? "****" : "NULL");
            response.put("fromEmail", fromEmail);
            response.put("mailSender", mailSender != null ? "주입됨" : "NULL");
            response.put("emailService", emailService != null ? "주입됨" : "NULL");
            
            // 2. JavaMailSender 설정 확인
            if (mailSender instanceof org.springframework.mail.javamail.JavaMailSenderImpl) {
                org.springframework.mail.javamail.JavaMailSenderImpl sender = 
                    (org.springframework.mail.javamail.JavaMailSenderImpl) mailSender;
                
                response.put("host", sender.getHost());
                response.put("port", sender.getPort());
                response.put("username", sender.getUsername());
                response.put("properties", sender.getJavaMailProperties().toString());
            }
            
            System.out.println("✅ 이메일 설정 확인 완료");
            response.put("status", "success");
            
        } catch (Exception e) {
            System.out.println("❌ 이메일 설정 확인 실패: " + e.getMessage());
            e.printStackTrace();
            response.put("status", "error");
            response.put("error", e.getMessage());
        }
        
        return ResponseEntity.ok(response);
    }
    
    /**
     * 간단한 이메일 발송 테스트 - 인증 불필요
     */
    @PostMapping("/send-test-email")
    public ResponseEntity<Map<String, Object>> testEmail(
            @RequestParam("to") String toEmail) {
        
        Map<String, Object> response = new HashMap<>();
        
        try {
            System.out.println("📧 EmailService 테스트 시작: " + toEmail);
            
            // EmailService를 통한 발송 테스트
            emailService.sendVerificationEmail(toEmail, "123456", "테스트사용자");
            
            response.put("status", "success");
            response.put("message", "이메일 발송 성공!");
            
        } catch (Exception e) {
            System.out.println("❌ 이메일 발송 실패: " + e.getMessage());
            e.printStackTrace();
            
            response.put("status", "error");
            response.put("error", e.getClass().getSimpleName());
            response.put("message", e.getMessage());
        }
        
        return ResponseEntity.ok(response);
    }
}
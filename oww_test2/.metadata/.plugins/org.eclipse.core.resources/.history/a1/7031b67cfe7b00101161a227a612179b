package com.oww.login.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import java.time.LocalDateTime;

@Entity
@Table(name = "USERS")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@EntityListeners(AuditingEntityListener.class)
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "user_seq")
    @SequenceGenerator(name = "user_seq", sequenceName = "USER_SEQ", allocationSize = 1)
    
    @Column(name = "userno", precision = 19)
    private Long userNo;

    @Column(name = "USER_EMAIL", nullable = false, unique = true, length = 100)
    private String email;

    @Column(name = "NAME", nullable = false, length = 50)
    private String name;

    @Enumerated(EnumType.STRING)
    @Column(name = "ROLE", nullable = false, length = 50)
    private Role role = Role.USER;

    @Enumerated(EnumType.STRING)
    @Column(name = "PROVIDER", nullable = false, length = 255)
    private Provider provider;

    @Column(name = "PROVIDER_ID", length = 255)
    private String providerId;

    @Column(name = "IS_ACTIVE", nullable = false, precision = 1)
    @Convert(converter = BooleanToNumberConverter.class)
    private Boolean isActive = true;

    @CreatedDate
    @Column(name = "CREATED_AT", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @LastModifiedDate
    @Column(name = "UPDATED_AT")
    private LocalDateTime updatedAt;

    public enum Role {
        USER, ADMIN
    }

    public enum Provider {
        GOOGLE, GITHUB
    }

    // 소셜 로그인용 생성자 (이름, 이메일만)
    public static User createSocialUser(String email, String name, Provider provider, String providerId) {
        return User.builder()
                .email(email)
                .name(name)
                .provider(provider)
                .providerId(providerId)
                .role(Role.USER)
                .isActive(true)
                .build();
    }

    // Oracle NUMBER(1)과 Boolean 간 변환을 위한 컨버터
    @Converter
    public static class BooleanToNumberConverter implements AttributeConverter<Boolean, Integer> {
        @Override
        public Integer convertToDatabaseColumn(Boolean attribute) {
            return attribute != null && attribute ? 1 : 0;
        }

        @Override
        public Boolean convertToEntityAttribute(Integer dbData) {
            return dbData != null && dbData == 1;
        }
    }
}
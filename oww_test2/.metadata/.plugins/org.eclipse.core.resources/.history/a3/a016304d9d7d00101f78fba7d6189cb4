package com.oww.login.controller;

import com.oww.login.dto.AuthDto;
import com.oww.login.entity.User;
import com.oww.login.oauth.CustomOAuth2User;
import com.oww.login.service.AuthService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseCookie;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import jakarta.servlet.http.HttpServletResponse;


@Controller
@RequestMapping("/oauth2")
@RequiredArgsConstructor
@Slf4j
public class OAuth2Controller {

    private final AuthService authService;

    @Value("${app.oauth2.redirect-uri:http://localhost:3000/oauth2/redirect}")
    private String redirectUri;

    @GetMapping("/success")
    public String oauth2LoginSuccess(@AuthenticationPrincipal OAuth2User oAuth2User,
                                     Model model,
                                     HttpServletResponse response) {

        if (!(oAuth2User instanceof CustomOAuth2User)) {
            log.error("OAuth2User is not an instance of CustomOAuth2User");
            model.addAttribute("error", "인증 실패");
            return "login-result";
        }

        CustomOAuth2User customUser = (CustomOAuth2User) oAuth2User;
        User user = customUser.getUser();

        boolean isNewUser = java.time.Duration.between(user.getCreatedAt(), user.getUpdatedAt()).toMinutes() < 1;

        AuthDto.SocialLoginResponse loginResponse = authService.processSocialLogin(user, isNewUser);

        // JWT 쿠키 생성
        ResponseCookie accessCookie = ResponseCookie.from("jwt-token", loginResponse.getAccessToken())
                .httpOnly(true)
                .secure(false)          // 로컬 테스트 시 false, HTTPS면 true
                .path("/")
                .sameSite("None")       // cross-port 요청 허용
                .maxAge(60 * 60)        // 1시간
                .build();
        response.addHeader(HttpHeaders.SET_COOKIE, accessCookie.toString());

        ResponseCookie refreshCookie = ResponseCookie.from("refresh-token", loginResponse.getRefreshToken())
                .httpOnly(true)
                .secure(false)
                .path("/")
                .sameSite("None")
                .maxAge(60 * 60 * 24 * 14) // 14일
                .build();
        response.addHeader(HttpHeaders.SET_COOKIE, refreshCookie.toString());

        // JSP/프론트엔드 전달용 모델
        model.addAttribute("success", true);
        model.addAttribute("userInfo", loginResponse.getUserInfo());
        model.addAttribute("isNewUser", loginResponse.isNewUser());

        log.info("OAuth2 로그인 성공: {} ({}) - 신규: {}",
                user.getEmail(), user.getProvider(), isNewUser);

        return "login-result";
    }

    @GetMapping("/failure")
    public String oauth2LoginFailure(Model model) {
        log.warn("OAuth2 로그인 실패");
        model.addAttribute("error", "소셜 로그인에 실패했습니다.");
        return "login-result";
    }
}

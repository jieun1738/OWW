@RestController
@RequestMapping("/test")
public class EmailTestController {

    @Autowired
    private EmailService emailService;
    
    @Autowired
    private JavaMailSender mailSender;
    
    @Value("${spring.mail.username}")
    private String mailUsername;
    
    @Value("${spring.mail.password}")
    private String mailPassword;
    
    @Value("${mail.from.email}")
    private String fromEmail;

    /**
     * 이메일 설정 확인용 엔드포인트
     */
    @GetMapping("/email-config")
    public ResponseEntity<Map<String, Object>> testEmailConfig() {
        Map<String, Object> response = new HashMap<>();
        
        try {
            System.out.println("🔍 이메일 설정 확인 시작...");
            
            // 1. 설정값 확인
            response.put("mailUsername", mailUsername);
            response.put("mailPassword", mailPassword != null ? "****" : "NULL");
            response.put("fromEmail", fromEmail);
            response.put("mailSender", mailSender != null ? "주입됨" : "NULL");
            response.put("emailService", emailService != null ? "주입됨" : "NULL");
            
            // 2. JavaMailSender 설정 확인
            if (mailSender instanceof org.springframework.mail.javamail.JavaMailSenderImpl) {
                org.springframework.mail.javamail.JavaMailSenderImpl sender = 
                    (org.springframework.mail.javamail.JavaMailSenderImpl) mailSender;
                
                response.put("host", sender.getHost());
                response.put("port", sender.getPort());
                response.put("username", sender.getUsername());
                response.put("properties", sender.getJavaMailProperties().toString());
            }
            
            System.out.println("✅ 이메일 설정 확인 완료");
            response.put("status", "success");
            
        } catch (Exception e) {
            System.out.println("❌ 이메일 설정 확인 실패: " + e.getMessage());
            e.printStackTrace();
            response.put("status", "error");
            response.put("error", e.getMessage());
        }
        
        return ResponseEntity.ok(response);
    }
    
    /**
     * 간단한 이메일 발송 테스트
     */
    @PostMapping("/send-simple-email")
    public ResponseEntity<Map<String, Object>> testSimpleEmail(
            @RequestParam("to") String toEmail) {
        
        Map<String, Object> response = new HashMap<>();
        
        try {
            System.out.println("📧 간단한 이메일 발송 테스트 시작: " + toEmail);
            
            // 직접 JavaMailSender 사용해서 테스트
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, false, "UTF-8");
            
            helper.setFrom(fromEmail, "테스트발송자");
            helper.setTo(toEmail);
            helper.setSubject("이메일 설정 테스트");
            helper.setText("이메일 설정이 정상적으로 작동합니다!", false);
            
            mailSender.send(message);
            
            System.out.println("✅ 간단한 이메일 발송 성공!");
            response.put("status", "success");
            response.put("message", "이메일 발송 성공");
            
        } catch (Exception e) {
            System.out.println("❌ 간단한 이메일 발송 실패: " + e.getClass().getSimpleName());
            System.out.println("❌ 오류 상세: " + e.getMessage());
            e.printStackTrace();
            
            response.put("status", "error");
            response.put("error", e.getClass().getSimpleName());
            response.put("message", e.getMessage());
        }
        
        return ResponseEntity.ok(response);
    }
    
    /**
     * EmailService를 통한 발송 테스트
     */
    @PostMapping("/send-verification-test")
    public ResponseEntity<Map<String, Object>> testVerificationEmail(
            @RequestParam("to") String toEmail) {
        
        Map<String, Object> response = new HashMap<>();
        
        try {
            System.out.println("📧 EmailService 통한 인증메일 발송 테스트: " + toEmail);
            
            emailService.sendVerificationEmail(toEmail, "123456", "테스트사용자");
            
            response.put("status", "success");
            response.put("message", "EmailService 발송 성공");
            
        } catch (Exception e) {
            System.out.println("❌ EmailService 발송 실패: " + e.getMessage());
            e.printStackTrace();
            
            response.put("status", "error");
            response.put("error", e.getClass().getSimpleName());
            response.put("message", e.getMessage());
        }
        
        return ResponseEntity.ok(response);
    }
}
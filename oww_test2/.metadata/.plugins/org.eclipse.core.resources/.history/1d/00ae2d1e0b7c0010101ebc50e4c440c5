package oww.banking.config;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import oww.banking.util.BankingJwtUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;

@Configuration
@EnableWebSecurity
public class BankingSecurityConfig {

    private final BankingJwtUtil jwtUtil;

    public BankingSecurityConfig(BankingJwtUtil jwtUtil) {
        this.jwtUtil = jwtUtil;
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http,
                                           TrustedGatewayFilter trustedGatewayFilter) throws Exception {

        http
            .csrf(csrf -> csrf.disable())
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .formLogin(form -> form.disable())
            .httpBasic(basic -> basic.disable())
            .authorizeHttpRequests(auth -> auth
                    .requestMatchers("/health", "/actuator/**").permitAll()
                    .requestMatchers("/css/**", "/js/**", "/images/**").permitAll()
                    .anyRequest().authenticated()
            )
            .exceptionHandling(ex -> ex
                    .authenticationEntryPoint((req, res, exAuth) -> {
                        res.setContentType("application/json;charset=UTF-8");
                        res.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
                        res.getWriter().write("{\"error\":\"Unauthorized\",\"message\":\"인증이 필요합니다\"}");
                    })
            )
            // ✅ JWT 필터 먼저 실행
            .addFilterBefore(new JwtAuthenticationFilter(jwtUtil), UsernamePasswordAuthenticationFilter.class)
            // ✅ TrustedGatewayFilter가 JWT 인증 정보 확인 후 통과
            .addFilterBefore(trustedGatewayFilter, JwtAuthenticationFilter.class);

        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowedOrigins(Arrays.asList("http://localhost:8201"));
        config.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        config.setAllowedHeaders(Arrays.asList("*"));
        config.setAllowCredentials(true);
        config.setMaxAge(3600L);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);
        return source;
    }

    /**
     * JWT 인증 필터 (쿠키 및 Authorization 헤더 지원)
     */
    public static class JwtAuthenticationFilter extends OncePerRequestFilter {

        private final BankingJwtUtil jwtUtil;

        public JwtAuthenticationFilter(BankingJwtUtil jwtUtil) {
            this.jwtUtil = jwtUtil;
        }

        @Override
        protected void doFilterInternal(HttpServletRequest request,
                                        HttpServletResponse response,
                                        FilterChain filterChain) throws ServletException, IOException {

            String authHeader = request.getHeader("Authorization");

            // 쿠키에서 jwt-token 읽기
            if ((authHeader == null || !authHeader.startsWith("Bearer ")) && request.getCookies() != null) {
                for (Cookie cookie : request.getCookies()) {
                    if ("jwt-token".equals(cookie.getName())) {
                        authHeader = "Bearer " + cookie.getValue();
                        break;
                    }
                }
            }

            if (authHeader != null && authHeader.startsWith("Bearer ")) {
                String token = authHeader.substring(7);
                try {
                    if (jwtUtil.validateToken(token)) {
                        String role = jwtUtil.extractRole(token);
                        String username = String.valueOf(jwtUtil.extractUserId(token));

                        if (SecurityContextHolder.getContext().getAuthentication() == null) {
                            SimpleGrantedAuthority authority = new SimpleGrantedAuthority(
                                    role.startsWith("ROLE_") ? role : "ROLE_" + role
                            );
                            UsernamePasswordAuthenticationToken authToken =
                                    new UsernamePasswordAuthenticationToken(username, null, Collections.singletonList(authority));
                            SecurityContextHolder.getContext().setAuthentication(authToken);
                        }
                    }
                } catch (Exception e) {
                    // 토큰 검증 실패 → SecurityContext 비어 있음
                }
            }

            filterChain.doFilter(request, response);
        }
    }

    /**
     * Gateway 신뢰 필터 Bean
     */
    @Bean
    public TrustedGatewayFilter trustedGatewayFilter() {
        return new TrustedGatewayFilter();
    }

    /**
     * Gateway 신뢰 필터
     * SecurityContext에 인증 정보가 있으면 그대로 통과
     */
    @Order(1)
    public static class TrustedGatewayFilter extends OncePerRequestFilter {

        private static final Logger log = LoggerFactory.getLogger(TrustedGatewayFilter.class);

        @Override
        protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
                                        FilterChain filterChain) throws ServletException, IOException {

            String requestURI = request.getRequestURI();
            log.debug("🔍 TrustedGatewayFilter 진입: {}", requestURI);

            if (requestURI.startsWith("/css/") || requestURI.startsWith("/js/") || requestURI.startsWith("/images/")) {
                filterChain.doFilter(request, response);
                return;
            }

            // SecurityContext 이미 인증되어 있으면 그대로 통과
            if (SecurityContextHolder.getContext().getAuthentication() != null) {
                filterChain.doFilter(request, response);
                return;
            }

            String userNO = request.getHeader("X-User-No");
            String username = request.getHeader("X-Username");
            String userRole = request.getHeader("X-User-Role");
            String authHeader = request.getHeader("Authorization");

            log.info("🔍 Gateway 헤더: User-No={}, Username={}, Role={}, Auth={} ",
                    userNO, username, userRole, authHeader != null ? "있음" : "없음");

            if (username != null && userRole != null &&
                authHeader != null && authHeader.startsWith("Bearer ")) {

                try {
                    String roleWithPrefix = userRole.startsWith("ROLE_") ? userRole : "ROLE_" + userRole;
                    SimpleGrantedAuthority authority = new SimpleGrantedAuthority(roleWithPrefix);

                    UsernamePasswordAuthenticationToken authToken =
                            new UsernamePasswordAuthenticationToken(username, null, Collections.singletonList(authority));
                    SecurityContextHolder.getContext().setAuthentication(authToken);

                    log.info("✅ Gateway 신뢰 인증 완료: {} (UserNo: {}, Role: {})", username, userNO, userRole);

                    filterChain.doFilter(request, response);
                    return;

                } catch (Exception e) {
                    log.error("❌ Gateway 인증 처리 중 오류: {}", e.getMessage());
                }
            }

            log.warn("❌ Gateway 헤더 부족 - 직접 접근 차단: {}", requestURI);

            response.setStatus(HttpServletResponse.SC_FORBIDDEN);
            response.setContentType("application/json;charset=UTF-8");
            response.getWriter().write(
                    "{\"error\":\"Forbidden\",\"message\":\"Gateway를 통해서만 접근 가능합니다\"}"
            );
        }
    }
}

package com.oww.login.config;

import com.oww.login.repository.UserRepository;
import com.oww.login.util.JwtUtil;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;
import org.springframework.stereotype.Component;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;

@Component
public class OAuth2LoginSuccessHandler extends SimpleUrlAuthenticationSuccessHandler {

    private final JwtUtil jwtUtil;
    private final UserRepository userRepository;

    public OAuth2LoginSuccessHandler(JwtUtil jwtUtil, UserRepository userRepository) {
        this.jwtUtil = jwtUtil;
        this.userRepository = userRepository;
    }

    @Override
    public void onAuthenticationSuccess(HttpServletRequest request,
                                        HttpServletResponse response,
                                        Authentication authentication) throws IOException, ServletException {

        OAuth2User oAuth2User = (OAuth2User) authentication.getPrincipal();

        String email = oAuth2User.getAttribute("email");
        String name = oAuth2User.getAttribute("name");

        System.out.println("OAuth2 로그인 성공: " + email);

        try {
            // 사용자 정보 조회
            Long userNo = userRepository.findByEmailAndIsActiveTrue(email)
                    .orElseThrow(() -> new IllegalArgumentException("사용자를 찾을 수 없습니다."))
                    .getUserNo();

            // JWT 액세스 토큰 생성 (표준화된 클레임 구조)
            String jwtToken = jwtUtil.generateToken(userNo, name);

            System.out.println("JWT 토큰 생성 완료");
            System.out.println("토큰 길이: " + jwtToken.length());

            // JWT 토큰 디버깅 (개발환경에서만)
            if (isDebugMode()) {
                jwtUtil.printAllClaims(jwtToken);
            }

            // JWT 액세스 토큰 쿠키 설정
            Cookie jwtCookie = createJwtCookie("jwt-token", jwtToken, 24 * 60 * 60); // 24시간
            response.addCookie(jwtCookie);

            System.out.println("JWT 쿠키 설정 완료:");
            System.out.println(" - Name: jwt-token");
            System.out.println(" - Path: /");
            System.out.println(" - MaxAge: " + (24 * 60 * 60));
            System.out.println(" - HttpOnly: false (개발용)");
            System.out.println(" - Secure: false (개발용)");

            // Refresh 토큰 생성
            String refreshToken = jwtUtil.generateRefreshToken(userNo, name);
            Cookie refreshCookie = createJwtCookie("refresh-token", refreshToken, 7 * 24 * 60 * 60); // 7일
            refreshCookie.setHttpOnly(true); // Refresh 토큰은 HTTP Only
            response.addCookie(refreshCookie);

            System.out.println("Refresh 쿠키 설정 완료");

            // Gateway로 리다이렉트 (성공 파라미터와 함께)
            String redirectUrl = buildRedirectUrl("http://localhost:8201/", "login", "success");
            System.out.println("Gateway로 리다이렉트: " + redirectUrl);

            getRedirectStrategy().sendRedirect(request, response, redirectUrl);

        } catch (Exception e) {
            System.err.println("로그인 처리 실패: " + e.getMessage());
            e.printStackTrace();
            
            // 에러 정보와 함께 리다이렉트
            String errorUrl = buildRedirectUrl("http://localhost:8201/", "login", "error");
            getRedirectStrategy().sendRedirect(request, response, errorUrl);
        }
    }

    /**
     * JWT 쿠키 생성 공통 메서드
     */
    private Cookie createJwtCookie(String name, String value, int maxAge) {
        Cookie cookie = new Cookie(name, value);
        cookie.setHttpOnly(false); // 개발환경: JS에서 읽기 가능
        cookie.setPath("/"); // 모든 경로에서 사용 가능
        cookie.setMaxAge(maxAge);
        cookie.setSecure(false); // 개발환경: HTTP에서도 사용 가능
        
        // TODO: 운영환경에서는 다음과 같이 설정
        // cookie.setHttpOnly(true); // 운영환경: XSS 방지
        // cookie.setSecure(true); // 운영환경: HTTPS만
        // cookie.setSameSite("Strict"); // CSRF 방지
        
        return cookie;
    }

    /**
     * 리다이렉트 URL 생성 (파라미터 포함)
     */
    private String buildRedirectUrl(String baseUrl, String paramName, String paramValue) {
        try {
            String encodedValue = URLEncoder.encode(paramValue, StandardCharsets.UTF_8.toString());
            return baseUrl + "?" + paramName + "=" + encodedValue;
        } catch (Exception e) {
            System.err.println("URL 인코딩 실패: " + e.getMessage());
            return baseUrl; // 기본 URL 반환
        }
    }

    /**
     * 디버그 모드 확인 (개발환경 판단)
     */
    private boolean isDebugMode() {
        // 환경변수나 프로파일로 판단 가능
        String profile = System.getProperty("spring.profiles.active", "dev");
        return "dev".equals(profile) || "local".equals(profile);
    }
}
// ========================================
// auth.js - 인증 및 UI 처리 (최종 수정 버전)
// ========================================

/**
 * 쿠키에서 특정 이름의 값을 가져옵니다.
 * @param {string} name - 가져올 쿠키의 이름
 * @returns {string|null} 쿠키 값 또는 null
 */
function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
    return null;
}

/**
 * 특정 이름의 쿠키를 삭제합니다.
 * @param {string} name - 삭제할 쿠키의 이름
 */
function deleteCookie(name) {
    document.cookie = name + '=; Max-Age=0; path=/;';
}

/**
 * Base64로 인코딩된 JWT payload를 디코딩합니다. (UTF-8 지원)
 * @param {string} str - Base64로 인코딩된 문자열
 * @returns {string} 디코딩된 문자열
 */
function b64DecodeUnicode(str) {
    try {
        return decodeURIComponent(atob(str).split('').map(function(c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));
    } catch (e) {
        console.error("Base64 디코딩 실패:", e);
        return null;
    }
}

/**
 * JWT 토큰의 유효성을 검사합니다.
 * @param {string} token - JWT 토큰
 * @returns {object|null} 디코딩된 payload 또는 null
 */
function validateJwtToken(token) {
    if (!token) return null;
    
    try {
        const parts = token.split('.');
        if (parts.length !== 3) {
            console.error("JWT 토큰 형식 오류");
            return null;
        }
        
        const payloadStr = b64DecodeUnicode(parts[1]);
        if (!payloadStr) return null;
        
        const payload = JSON.parse(payloadStr);
        
        // 토큰 만료 시간 확인
        if (payload.exp && payload.exp < Date.now() / 1000) {
            console.log("JWT 토큰이 만료되었습니다.");
            return null;
        }
        
        return payload;
    } catch (e) {
        console.error('JWT 토큰 검증 실패:', e);
        return null;
    }
}

// ========================================
// UI 상태 변경 함수
// ========================================

function showLoggedInState() {
    console.log('로그인 상태 UI 표시');
    
    const loggedInSection = document.getElementById('logged-in-section');
    const loggedOutSection = document.getElementById('logged-out-section');
    const serviceCards = document.getElementById('service-cards');
    const loginNotice = document.getElementById('login-notice');
    
    if (loggedInSection) loggedInSection.style.display = 'flex';
    if (loggedOutSection) loggedOutSection.style.display = 'none';
    if (serviceCards) serviceCards.style.display = 'flex';
    if (loginNotice) loginNotice.style.display = 'none';
}

function showLoggedOutState() {
    console.log('로그아웃 상태 UI 표시');
    
    const loggedInSection = document.getElementById('logged-in-section');
    const loggedOutSection = document.getElementById('logged-out-section');
    const serviceCards = document.getElementById('service-cards');
    const loginNotice = document.getElementById('login-notice');
    
    if (loggedInSection) loggedInSection.style.display = 'none';
    if (loggedOutSection) loggedOutSection.style.display = 'block';
    if (serviceCards) serviceCards.style.display = 'none';
    if (loginNotice) loginNotice.style.display = 'block';
}

/**
 * 페이지의 여러 위치에 사용자 정보를 업데이트합니다.
 * @param {string} name - 사용자 이름
 * @param {string} email - 사용자 이메일
 */
function updateUserInfo(name, email) {
    console.log('사용자 정보 업데이트:', name, email);
    
    // 헤더
    const userNameHeader = document.getElementById('user-name-header');
    if (userNameHeader) userNameHeader.textContent = name + '님';
    
    // 서비스 카드 (계좌)
    const userNameDisplay = document.getElementById('user-name-display');
    if (userNameDisplay) userNameDisplay.textContent = name;
    
    // 서비스 카드 (세이프박스)
    const userNameDisplay2 = document.getElementById('user-name-display2');
    if (userNameDisplay2) userNameDisplay2.textContent = name;
    
    // 웰컴 모달
    const modalUserName = document.getElementById('modal-user-name');
    if (modalUserName) modalUserName.textContent = name;

    // 이메일 표시 요소가 있다면 업데이트
    const emailDisplay = document.getElementById('user-email-display');
    if (emailDisplay) {
        emailDisplay.textContent = email;
    }
}

// ========================================
// 로그인/로그아웃 함수
// ========================================

/**
 * Google OAuth2 로그인을 시작합니다.
 */
function login() {
    console.log('로그인 시작...');
    
    // Gateway를 통해 OAuth2 인증 시작
    const authUrl = '/oauth2/authorization/google';
    console.log('리다이렉트 URL:', authUrl);
    
    window.location.href = authUrl;
}

/**
 * GitHub OAuth2 로그인을 시작합니다.
 */
function loginWithGitHub() {
    console.log('GitHub 로그인 시작...');
    
    const authUrl = '/oauth2/authorization/github';
    console.log('리다이렉트 URL:', authUrl);
    
    window.location.href = authUrl;
}

/**
 * 로그아웃을 처리합니다.
 */
function logout() {
    console.log('로그아웃 시작...');
    
    try {
        // JWT 토큰 쿠키 삭제
        deleteCookie('jwt-token');
        deleteCookie('refresh-token');
        
        // 세션 스토리지 클리어 (있다면)
        if (typeof sessionStorage !== 'undefined') {
            sessionStorage.clear();
        }
        
        console.log('로그아웃 완료 - 페이지 새로고침');
        
        // 메인 페이지로 리다이렉트하면서 새로고침
        window.location.href = '/';
        
    } catch (error) {
        console.error('로그아웃 중 오류:', error);
        alert('로그아웃 중 문제가 발생했습니다.');
    }
}

// ========================================
// 웰컴 모달 관련 함수
// ========================================

function showWelcomeModal() {
    console.log('웰컴 모달 표시');
    const modal = document.getElementById('welcome-modal');
    if (modal) {
        modal.style.display = 'block';
    }
}

function closeWelcomeModal() {
    console.log('웰컴 모달 닫기');
    const modal = document.getElementById('welcome-modal');
    if (modal) {
        modal.style.display = 'none';
    }
}

// ========================================
// 계좌 정보 로드 함수
// ========================================

/**
 * 계좌 정보를 로드합니다.
 */
function loadAccountInfo() {
    console.log('계좌 정보 로드 시작...');
    
    const jwtToken = getCookie('jwt-token');
    
    if (!jwtToken) {
        console.error('JWT 토큰이 없습니다.');
        updateAccountUI(null);
        return;
    }
    
    // Banking Service API 호출
    fetch('/api/account/info', {
        method: 'GET',
        headers: {
            'Authorization': `Bearer ${jwtToken}`,
            'Content-Type': 'application/json'
        }
    })
    .then(response => {
        if (response.ok) {
            return response.json();
        }
        throw new Error(`계좌 정보 로드 실패: ${response.status}`);
    })
    .then(data => {
        console.log('계좌 정보 로드 성공:', data);
        updateAccountUI(data);
    })
    .catch(error => {
        console.error('계좌 정보 로드 오류:', error);
        updateAccountUI(null);
    });
}

/**
 * 계좌 정보 UI를 업데이트합니다.
 * @param {object|null} accountData - 계좌 정보 데이터
 */
function updateAccountUI(accountData) {
    if (accountData) {
        // 실제 계좌 정보로 업데이트
        const accountNumberElement = document.getElementById('account-number');
        if (accountNumberElement) {
            accountNumberElement.textContent = accountData.accountNumber || '계좌번호 없음';
        }
        
        const balanceElements = document.querySelectorAll('.balance-amount');
        balanceElements.forEach(element => {
            const balance = accountData.balance || 0;
            element.textContent = balance.toLocaleString() + '원';
        });
    } else {
        // 기본값으로 표시
        const accountNumberElement = document.getElementById('account-number');
        if (accountNumberElement) {
            accountNumberElement.textContent = '계좌를 생성해주세요';
        }
        
        const balanceElements = document.querySelectorAll('.balance-amount');
        balanceElements.forEach(element => {
            element.textContent = '0원';
        });
    }
}

// ========================================
// 메인 로그인 상태 확인 함수
// ========================================

/**
 * 페이지 로드 시 로그인 상태를 확인하고 UI를 업데이트하는 메인 함수
 */
function checkLoginStatus() {
    console.log('로그인 상태 확인 시작...');
    
    const token = getCookie('jwt-token');

    if (!token) {
        console.log('JWT 토큰이 없습니다 - 로그아웃 상태 표시');
        showLoggedOutState();
        return false;
    }

    // JWT 토큰 검증
    const payload = validateJwtToken(token);
    
    if (!payload) {
        console.log('JWT 토큰이 유효하지 않습니다 - 로그아웃 상태 표시');
        deleteCookie('jwt-token');
        deleteCookie('refresh-token');
        showLoggedOutState();
        return false;
    }

    try {
        // JWT payload에서 사용자 정보 추출
        const userName = payload.username || payload.name || payload.sub || '사용자';
        const userEmail = payload.email || payload.sub || '이메일 정보 없음';

        console.log('로그인 상태 확인됨:', userName, userEmail);

        // UI 업데이트
        updateUserInfo(userName, userEmail);
        showLoggedInState();

        // 계좌 정보 로드
        loadAccountInfo();

        // 로그인 성공 후 웰컴 모달 표시 확인
        checkLoginSuccess();

        return true;

    } catch (e) {
        console.error('사용자 정보 처리 중 오류:', e);
        showLoggedOutState();
        return false;
    }
}

/**
 * URL 파라미터에서 로그인 성공/실패를 확인합니다.
 */
function checkLoginSuccess() {
    const urlParams = new URLSearchParams(window.location.search);
    const loginStatus = urlParams.get('login');
    
    if (loginStatus === 'success') {
        console.log('로그인 성공 감지 - 웰컴 모달 표시');
        showWelcomeModal();
        
        // URL에서 파라미터 제거
        const url = new URL(window.location);
        url.searchParams.delete('login');
        window.history.replaceState({}, document.title, url);
        
    } else if (loginStatus === 'failure') {
        console.log('로그인 실패 감지');
        alert('로그인에 실패했습니다. 다시 시도해주세요.');
        
        // URL에서 파라미터 제거
        const url = new URL(window.location);
        url.searchParams.delete('login');
        window.history.replaceState({}, document.title, url);
    }
}

// ========================================
// 이벤트 리스너 및 초기화
// ========================================

/**
 * 페이지 로드 완료 시 실행되는 초기화 함수
 */
function initializeAuth() {
    console.log('인증 시스템 초기화 시작...');
    
    // 로그인 상태 확인
    const isLoggedIn = checkLoginStatus();
    
    console.log('인증 시스템 초기화 완료 - 로그인 상태:', isLoggedIn);
}

// 페이지 로드가 완료되면 초기화 실행
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM 로드 완료 - 인증 시스템 초기화');
    initializeAuth();
});

// 페이지 focus 시 토큰 상태 재확인 (탭 전환 등에서 돌아올 때)
window.addEventListener('focus', function() {
    console.log('페이지 포커스 - 토큰 상태 재확인');
    checkLoginStatus();
});
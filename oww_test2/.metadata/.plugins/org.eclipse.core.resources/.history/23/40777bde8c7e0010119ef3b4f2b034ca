<!DOCTYPE html>
<html lang="ko" xmlns:th="http://www.thymeleaf.org">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>세이프박스 입출금 및 정기저금통</title>
  <link rel="stylesheet" th:href="@{/css/safebox_css.css}" />
  <style>
    .balance-info {
      display: flex;
      justify-content: space-between;
      margin: 10px 0;
      padding: 15px;
      background: #f8f9fa;
      border-radius: 8px;
      font-weight: bold;
    }
    
    .balance-info.total {
      background: #e3f2fd;
      border: 2px solid #2196f3;
    }
    
    .balance-amount {
      color: #27ae60;
      font-size: 1.1em;
    }
    
    .safebox-amount {
      color: #8e44ad;
      font-size: 1.1em;
    }
    
    .total-amount {
      color: #2196f3;
      font-size: 1.2em;
    }

    .radio-group {
      display: flex;
      gap: 20px;
      margin: 10px 0;
    }

    .radio-group label {
      display: flex;
      align-items: center;
      gap: 5px;
      cursor: pointer;
    }

    .error-message {
      color: #e74c3c;
      font-size: 0.9em;
      margin-top: 5px;
    }

    .success-message {
      color: #27ae60;
      font-size: 0.9em;
      margin-top: 5px;
    }
  </style>
</head>
<body>

  <!-- 사용자 정보 및 잔액 표시 -->
  <div class="card">
    <div class="section-title">
      <span th:text="${userName}">사용자</span>님의 자산 현황
    </div>

    <div class="balance-info">
      <div>계좌 잔액</div>
      <div class="balance-amount" id="accountBalance" 
           th:text="'₩' + ${#numbers.formatInteger(accountBalance ?: 0, 3, 'COMMA')}">₩0</div>
    </div>
    
    <div class="balance-info">
      <div>세이프박스</div>
      <div class="safebox-amount" id="safeboxBalance" 
           th:text="'₩' + ${#numbers.formatInteger(safeboxBalance ?: 0, 3, 'COMMA')}">₩0</div>
    </div>
    
    <div class="balance-info total">
      <div>총 자산</div>
      <div class="total-amount" id="totalAssets" 
           th:text="'₩' + ${#numbers.formatInteger(totalAssets ?: 0, 3, 'COMMA')}">₩0</div>
    </div>
  </div>

  <!-- 세이프박스 입출금 카드 -->
  <div class="card">
    <div class="section-title">💰 세이프박스 입출금</div>

    <div class="slider-container">
      <div class="slider-label" id="currentAmount">₩0</div>
      <input type="range" id="slider" min="0" max="0" step="10000" value="0" />
      <div class="step-buttons">
        <button onclick="adjust(-10000)">-1만</button>
        <button onclick="adjust(10000)">+1만</button>
      </div>
    </div>

    <div style="display: flex; gap: 10px; margin: 20px 0;">
      <button class="submit-btn" style="flex: 1; background: #27ae60;" onclick="transferMoney('deposit')">
        계좌 → 세이프박스 입금
      </button>
      <button class="submit-btn" style="flex: 1; background: #e74c3c;" onclick="transferMoney('withdraw')">
        세이프박스 → 계좌 출금
      </button>
    </div>

    <div id="transferMessage"></div>

    <div class="note">
      세이프박스 해제 예정일: 2025.08.10<br/>
      출금은 해제일 이후에 가능합니다.
    </div>
  </div>

  <!-- 정기저금통 카드 -->
  <div class="card">
    <div class="section-title">🎯 정기저금통 설정</div>

    <form id="autoSaveForm">
      <div class="form-group">
        <label>목표 금액</label>
        <input type="number" id="goalAmount" placeholder="예: 500000" required />
      </div>

      <div class="form-group">
        <label>시작일</label>
        <input type="date" id="startDate" required />
      </div>

      <div class="form-group">
        <label>종료일 (목표 달성일)</label>
        <input type="date" id="endDate" required />
      </div>

      <div class="form-group">
        <label>자동 저축 주기</label>
        <div class="radio-group">
          <label><input type="radio" name="cycle" value="daily" checked /> 매일</label>
          <label><input type="radio" name="cycle" value="monthly" /> 매월</label>
        </div>
      </div>

      <div class="form-group">
        <label>자동 저축 금액</label>
        <input type="number" id="autoAmount" placeholder="자동 계산됨" readonly />
      </div>

      <button class="submit-btn" type="submit">정기저금통 설정하기</button>
      <div id="goalMessage"></div>
    </form>
  </div>

  <script src="/js/auth-buttons.js"></script>

  <script>
    // 초기 데이터 설정
    let accountBalance = /*[[${accountBalance ?: 0}]]*/ 0;
    let safeboxBalance = /*[[${safeboxBalance ?: 0}]]*/ 0;
    let totalAssets = /*[[${totalAssets ?: 0}]]*/ 0;

    // DOM 요소
    const slider = document.getElementById("slider");
    const currentAmount = document.getElementById("currentAmount");

    // 슬라이더 초기 설정
    slider.max = totalAssets;
    slider.value = safeboxBalance;
    updateSliderDisplay();

    // 유틸리티 함수
    function formatCurrency(value) {
      return '₩' + value.toLocaleString();
    }

    function updateSliderDisplay() {
      currentAmount.textContent = formatCurrency(Number(slider.value));
    }

    function updateBalanceDisplay() {
      document.getElementById("accountBalance").textContent = formatCurrency(accountBalance);
      document.getElementById("safeboxBalance").textContent = formatCurrency(safeboxBalance);
      document.getElementById("totalAssets").textContent = formatCurrency(totalAssets);
      
      // 슬라이더 범위 업데이트
      slider.max = totalAssets;
      slider.value = safeboxBalance;
      updateSliderDisplay();
    }

    // 슬라이더 이벤트
    slider.addEventListener("input", updateSliderDisplay);

    function adjust(amount) {
      let newValue = Number(slider.value) + amount;
      newValue = Math.min(Math.max(newValue, 0), totalAssets);
      slider.value = newValue;
      updateSliderDisplay();
    }

    // 세이프박스 이체 함수
    function transferMoney(type) {
      const targetAmount = Number(slider.value);
      const currentSafebox = safeboxBalance;
      
      let transferAmount;
      if (type === 'deposit') {
        transferAmount = targetAmount - currentSafebox;
      } else {
        transferAmount = currentSafebox - targetAmount;
      }

      if (transferAmount <= 0) {
        showMessage('transferMessage', '이체할 금액을 확인해주세요.', 'error');
        return;
      }

      // 서버에 이체 요청
      fetch('/banking/safebox/transfer', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'X-Requested-With': 'XMLHttpRequest'
        },
        body: `amount=${transferAmount}&type=${type}`,
        credentials: 'include'
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          // 잔액 업데이트
          accountBalance = data.accountBalance;
          safeboxBalance = data.safeboxBalance;
          totalAssets = accountBalance + safeboxBalance;
          
          updateBalanceDisplay();
          showMessage('transferMessage', data.message, 'success');
        } else {
          showMessage('transferMessage', data.message, 'error');
        }
      })
      .catch(err => {
        console.error('이체 오류:', err);
        showMessage('transferMessage', '이체 중 오류가 발생했습니다.', 'error');
      });
    }

    // 정기저금통 로직
    const goalInput = document.getElementById("goalAmount");
    const startDate = document.getElementById("startDate");
    const endDate = document.getElementById("endDate");
    const autoAmount = document.getElementById("autoAmount");

    function calculateAutoSaveAmount() {
      const goal = Number(goalInput.value);
      const start = new Date(startDate.value);
      const end = new Date(endDate.value);
      const cycle = document.querySelector('input[name="cycle"]:checked').value;

      if (!goal || !startDate.value || !endDate.value || start >= end) {
        autoAmount.value = '';
        return;
      }

      const msPerDay = 24 * 60 * 60 * 1000;
      const diffDays = Math.ceil((end - start) / msPerDay);
      const diffMonths = Math.ceil(diffDays / 30);

      let periods = cycle === 'daily' ? diffDays : diffMonths;
      if (periods <= 0) {
        autoAmount.value = '';
        return;
      }

      const perAmount = Math.ceil(goal / periods);
      autoAmount.value = perAmount;
    }

    // 이벤트 리스너
    goalInput.addEventListener("input", calculateAutoSaveAmount);
    startDate.addEventListener("change", calculateAutoSaveAmount);
    endDate.addEventListener("change", calculateAutoSaveAmount);
    document.querySelectorAll('input[name="cycle"]').forEach(radio => {
      radio.addEventListener("change", calculateAutoSaveAmount);
    });

    // 정기저금통 설정 폼 제출
    document.getElementById("autoSaveForm").addEventListener("submit", function (e) {
      e.preventDefault();
      
      const formData = new FormData(this);
      const params = new URLSearchParams();
      
      params.append('goalAmount', goalInput.value);
      params.append('startDate', startDate.value);
      params.append('endDate', endDate.value);
      params.append('cycle', document.querySelector('input[name="cycle"]:checked').value);
      params.append('autoAmount', autoAmount.value);

      fetch('/banking/safebox/goal', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'X-Requested-With': 'XMLHttpRequest'
        },
        body: params.toString(),
        credentials: 'include'
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          showMessage('goalMessage', data.message, 'success');
          this.reset();
          autoAmount.value = '';
        } else {
          showMessage('goalMessage', data.message, '
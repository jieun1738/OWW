package com.oww.login.config;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;

import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Value; // 1. @Value 추가

import com.oww.login.repository.UserRepository;
import com.oww.login.util.JwtUtil;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class OAuth2LoginSuccessHandler extends SimpleUrlAuthenticationSuccessHandler {

	private final JwtUtil jwtUtil;
	private final UserRepository userRepository;
	
	@Value("${spring.profiles.active:dev}") // 2. 프로필 주입
	private String activeProfile;

	public OAuth2LoginSuccessHandler(JwtUtil jwtUtil, UserRepository userRepository) {
		this.jwtUtil = jwtUtil;
		this.userRepository = userRepository;
	}

	@Override
	public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
			Authentication authentication) throws IOException, ServletException {

		OAuth2User oAuth2User = (OAuth2User) authentication.getPrincipal();
		String email = oAuth2User.getAttribute("email");
		String name = oAuth2User.getAttribute("name");

		try {
			Long userNo = userRepository.findByEmailAndIsActiveTrue(email)
					.orElseThrow(() -> new IllegalArgumentException("사용자를 찾을 수 없습니다.")).getUserNo();

			String jwtToken = jwtUtil.generateToken(userNo, name);
			String refreshToken = jwtUtil.generateRefreshToken(userNo, name);

			System.out.println("JWT 토큰 길이: " + jwtToken.length());
			if (jwtToken.length() > 4000) {
				System.err.println("경고: JWT 토큰이 너무 깁니다!");
			}

			if (response.isCommitted()) {
				System.err.println("응답이 이미 커밋되었습니다!");
				return;
			}
			
			// 3. createJwtCookie 메서드 호출 시, 첫 번째 인수로 response 객체 추가
			//    메서드 시그니처와 맞지 않아 발생했던 오류 해결
			createAndAddJwtCookie(response, "jwt-token", jwtToken, 24 * 60 * 60, false);
			createAndAddJwtCookie(response, "refresh-token", refreshToken, 7 * 24 * 60 * 60, true);

			System.out.println("=== 쿠키 설정 완료 ===");
			
			String redirectUrl = buildRedirectUrl("http://localhost:8201/", "login", "success");
			System.out.println("리다이렉트 URL: " + redirectUrl);

			getRedirectStrategy().sendRedirect(request, response, redirectUrl);

		} catch (Exception e) {
			System.err.println("로그인 처리 실패: " + e.getMessage());
			e.printStackTrace();

			String errorUrl = buildRedirectUrl("http://localhost:8201/", "login", "error");
			getRedirectStrategy().sendRedirect(request, response, errorUrl);
		}
	}

	/**
	 * JWT 쿠키 생성 및 응답에 추가하는 공통 메서드
	 */
	private void createAndAddJwtCookie(HttpServletResponse response, String name, String value, int maxAge, boolean httpOnly) {
		Cookie cookie = new Cookie(name, value);
		cookie.setHttpOnly(httpOnly);
		cookie.setPath("/");
		cookie.setMaxAge(maxAge);
		
		// 4. 개발 환경과 운영 환경에 따라 setSecure 동적 설정
		//    'dev' 프로필에서만 false, 그 외에는 true
		if ("dev".equalsIgnoreCase(activeProfile)) {
			cookie.setSecure(false);
		} else {
			cookie.setSecure(true);
		}

		cookie.setDomain("localhost");

		System.out.println("쿠키 생성: " + name + " (도메인: localhost, 경로: /, HttpOnly: " + httpOnly + ", MaxAge: " + maxAge + ")");
		
		response.addCookie(cookie);
	}

	/**
	 * 리다이렉트 URL 생성 (파라미터 포함)
	 */
	private String buildRedirectUrl(String baseUrl, String paramName, String paramValue) {
		try {
			String encodedValue = URLEncoder.encode(paramValue, StandardCharsets.UTF_8.toString());
			return baseUrl + "?" + paramName + "=" + encodedValue;
		} catch (Exception e) {
			System.err.println("URL 인코딩 실패: " + e.getMessage());
			return baseUrl;
		}
	}
	// isDebugMode() 메서드는 더 이상 필요 없어 삭제합니다.
}
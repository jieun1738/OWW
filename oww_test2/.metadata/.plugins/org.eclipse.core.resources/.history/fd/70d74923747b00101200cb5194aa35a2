package oww.banking.config;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;

@Configuration
@EnableWebSecurity
public class BankingSecurityConfig {

	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
	    http
	        .csrf(csrf -> csrf.disable())
	        .cors(cors -> cors.configurationSource(corsConfigurationSource()))
	        .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
	        .formLogin(form -> form.disable())
	        .httpBasic(basic -> basic.disable())
	        .authorizeHttpRequests(auth -> auth
	                .requestMatchers("/health", "/actuator/**").permitAll()
	                .requestMatchers("/css/**", "/js/**", "/images/**").permitAll() // ✅ 정적 파일 허용
	                .anyRequest().authenticated()
	        )
	        .exceptionHandling(ex -> ex
	                .authenticationEntryPoint((req, res, exAuth) -> {
	                    res.setContentType("application/json;charset=UTF-8");
	                    res.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
	                    res.getWriter().write("{\"error\":\"Unauthorized\",\"message\":\"Gateway를 통해 접근해주세요\"}");
	                })
	        )
	        // ✅ JWT 검증 대신 Gateway 헤더 검증 필터로 변경
	        .addFilterBefore(new TrustedGatewayFilter(), UsernamePasswordAuthenticationFilter.class);

	    return http.build();
	}

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowedOrigins(Arrays.asList(
                "http://localhost:8201" // Gateway만 허용
        ));
        config.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        config.setAllowedHeaders(Arrays.asList("*"));
        config.setAllowCredentials(true);
        config.setMaxAge(3600L);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);
        return source;
    }

    /**
     * ✅ Gateway에서 온 요청만 신뢰하고 SecurityContext도 설정하는 통합 필터
     */
    public static class TrustedGatewayFilter extends OncePerRequestFilter {

        private static final Logger log = LoggerFactory.getLogger(TrustedGatewayFilter.class);

        @Override
        protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
                                        FilterChain filterChain) throws ServletException, IOException {

            // ✅ 정적 파일은 필터 검사 없이 바로 통과
            String path = request.getRequestURI();
            if (path.startsWith("/css/") || path.startsWith("/js/") || path.startsWith("/images/")) {
                filterChain.doFilter(request, response);
                return;
            }
            
            // ✅ Gateway에서 전달한 사용자 헤더 확인
            String userId = request.getHeader("X-User-Id");
            String username = request.getHeader("X-Username");
            String userRole = request.getHeader("X-User-Role");
            String authHeader = request.getHeader("Authorization");

            log.info("🔍 Gateway 헤더: User-Id={}, Username={}, Role={}, Auth={}", 
                    userId, username, userRole, authHeader != null ? "있음" : "없음");

            // ✅ Username과 Role이 있고 Authorization 헤더도 있으면 Gateway에서 온 요청
            if (username != null && userRole != null && 
                authHeader != null && authHeader.startsWith("Bearer ")) {
                
                try {
                    // ROLE_ 접두사 처리
                    String roleWithPrefix = userRole.startsWith("ROLE_") ? userRole : "ROLE_" + userRole;
                    SimpleGrantedAuthority authority = new SimpleGrantedAuthority(roleWithPrefix);
                    
                    // SecurityContext에 인증 정보 설정
                    UsernamePasswordAuthenticationToken authToken = 
                        new UsernamePasswordAuthenticationToken(username, null, Collections.singletonList(authority));
                    SecurityContextHolder.getContext().setAuthentication(authToken);
                    
                    log.info("✅ Gateway 신뢰 인증 완료: {} (ID: {}, Role: {})", username, userId, userRole);
                    
                    // ✅ JWT 재검증 없이 바로 통과
                    filterChain.doFilter(request, response);
                    return;
                    
                } catch (Exception e) {
                    log.error("❌ Gateway 인증 처리 중 오류: {}", e.getMessage());
                }
            }

            // ❌ Gateway를 통하지 않은 직접 접근
            log.warn("❌ Gateway 헤더 부족 - 직접 접근 차단");
            
            response.setStatus(HttpServletResponse.SC_FORBIDDEN);
            response.setContentType("application/json;charset=UTF-8");
            response.getWriter().write(
                "{\"error\":\"Forbidden\",\"message\":\"Gateway를 통해서만 접근 가능합니다\"}"
            );
        }
    }
}
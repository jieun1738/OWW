package com.oww.gateway.util;

import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.util.Date;
import java.util.function.Function;

@Component
public class JwtUtil {

    @Value("${jwt.secret}")
    private String secretKey;

    @Value("${jwt.expiration}")
    private Long expiration;

    private SecretKey getSigningKey() {
        return Keys.hmacShaKeyFor(secretKey.getBytes());
    }

    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }

    public Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }

    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    private Claims extractAllClaims(String token) {
        try {
            return Jwts.parserBuilder()
                    .setSigningKey(getSigningKey())
                    .build()
                    .parseClaimsJws(token)
                    .getBody();
        } catch (JwtException e) {
            System.err.println("JWT 파싱 오류: " + e.getMessage());
            throw new IllegalArgumentException("Invalid JWT token", e);
        }
    }

    public Boolean isTokenExpired(String token) {
        try {
            return extractExpiration(token).before(new Date());
        } catch (Exception e) {
            System.err.println("토큰 만료 시간 확인 오류: " + e.getMessage());
            return true;
        }
    }

    public Boolean validateToken(String token) {
        try {
            extractAllClaims(token);
            boolean isValid = !isTokenExpired(token);
            System.out.println("JWT 토큰 검증 결과: " + (isValid ? "유효" : "만료됨"));
            return isValid;
        } catch (Exception e) {
            System.err.println("JWT 토큰 검증 실패: " + e.getMessage());
            return false;
        }
    }

    // Gateway 필터에서 호출하는 메서드 (호환성 유지)
    public String getUsernameFromToken(String token) {
        return extractUsername(token);
    }

    // 토큰에서 역할(role) 추출
    public String extractRole(String token) {
        try {
            String role = extractClaim(token, claims -> claims.get("role", String.class));
            System.out.println("추출된 역할: " + role);
            return role;
        } catch (Exception e) {
            System.err.println("역할 추출 오류: " + e.getMessage());
            return null;
        }
    }

    // 토큰에서 사용자 번호 추출 (기존 userId → userNo로 변경)
    public String extractUserNo(String token) {
        try {
            // userNo를 문자열로 추출
            Object userNo = extractClaim(token, claims -> claims.get("userNo"));
            String userNoStr = userNo != null ? userNo.toString() : null;
            System.out.println("추출된 사용자 번호: " + userNoStr);
            return userNoStr;
        } catch (Exception e) {
            System.err.println("사용자 번호 추출 오류: " + e.getMessage());
            return null;
        }
    }

    // 하위 호환성을 위해 기존 메서드 유지 (userNo를 반환하도록 수정)
    public Long extractUserId(String token) {
        String userNo = extractUserNo(token);
        try {
            return userNo != null ? Long.parseLong(userNo) : null;
        } catch (NumberFormatException e) {
            System.err.println("사용자 ID 변환 오류: " + e.getMessage());
            return null;
        }
    }

    // 디버깅용 - 토큰의 모든 클레임 출력
    public void printAllClaims(String token) {
        try {
            Claims claims = extractAllClaims(token);
            System.out.println("=== JWT 토큰 클레임 정보 ===");
            System.out.println("Subject (username): " + claims.getSubject());
            System.out.println("Issued At: " + claims.getIssuedAt());
            System.out.println("Expiration: " + claims.getExpiration());
            System.out.println("Role: " + claims.get("role"));
            System.out.println("UserNo: " + claims.get("userNo"));
            System.out.println("All Claims: " + claims);
            System.out.println("========================");
        } catch (Exception e) {
            System.err.println("클레임 출력 오류: " + e.getMessage());
        }
    }
}
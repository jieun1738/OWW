package oww.banking.config;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.Arrays;

@Configuration
@EnableWebSecurity
public class BankingSecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .formLogin(form -> form.disable())
            .httpBasic(basic -> basic.disable())
            .authorizeHttpRequests(auth -> auth
                    .requestMatchers("/health", "/actuator/**").permitAll()
                    .anyRequest().authenticated()
            )
            .exceptionHandling(ex -> ex
                    .authenticationEntryPoint((req, res, exAuth) -> {
                        res.setContentType("application/json;charset=UTF-8");
                        res.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
                        res.getWriter().write("{\"error\":\"Unauthorized\",\"message\":\"Gateway를 통해 접근해주세요\"}");
                    })
            )
            // ✅ JWT 검증 대신 Gateway 헤더 검증 필터로 변경
            .addFilterBefore(new TrustedGatewayFilter(), UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowedOrigins(Arrays.asList(
                "http://localhost:8201" // Gateway만 허용
        ));
        config.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        config.setAllowedHeaders(Arrays.asList("*"));
        config.setAllowCredentials(true);
        config.setMaxAge(3600L);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);
        return source;
    }

    /**
     * ✅ Gateway에서 온 요청만 신뢰하는 필터
     * JWT 재검증 없이 헤더 정보만으로 인증 처리
     */
    public static class TrustedGatewayFilter extends OncePerRequestFilter {

        @Override
        protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
                                        FilterChain filterChain) throws ServletException, IOException {

            // ✅ Gateway에서 전달한 사용자 헤더 확인
            String userId = request.getHeader("X-User-Id");
            String username = request.getHeader("X-Username");
            String userRole = request.getHeader("X-User-Role");
            String authHeader = request.getHeader("Authorization");

            // ✅ Gateway에서 온 요청인지 확인 (필수 헤더들이 모두 있는지)
            if (userId != null && username != null && userRole != null && 
                authHeader != null && authHeader.startsWith("Bearer ")) {
                
                System.out.println("✅ Gateway 신뢰 인증 성공:");
                System.out.println("   - User ID: " + userId);
                System.out.println("   - Username: " + username);
                System.out.println("   - Role: " + userRole);
                
                // ✅ JWT 재검증 없이 바로 통과
                filterChain.doFilter(request, response);
                return;
                
            } else {
                // ❌ Gateway를 통하지 않은 직접 접근
                System.out.println("❌ Gateway 헤더 없음 - 직접 접근 차단");
                System.out.println("   - X-User-Id: " + userId);
                System.out.println("   - X-Username: " + username);
                System.out.println("   - X-User-Role: " + userRole);
                System.out.println("   - Authorization: " + (authHeader != null ? "있음" : "없음"));
                
                response.setStatus(HttpServletResponse.SC_FORBIDDEN);
                response.setContentType("application/json;charset=UTF-8");
                response.getWriter().write(
                    "{\"error\":\"Forbidden\",\"message\":\"Gateway를 통해서만 접근 가능합니다\"}"
                );
                return;
            }
        }
    }
}
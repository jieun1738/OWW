package com.oww.login.config;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;

import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;
import org.springframework.stereotype.Component;
import org.springframework.beans.factory.annotation.Value;

import com.oww.login.repository.UserRepository;
import com.oww.login.util.JwtUtil;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class OAuth2LoginSuccessHandler extends SimpleUrlAuthenticationSuccessHandler {

	private final JwtUtil jwtUtil;
	private final UserRepository userRepository;
	
	@Value("${spring.profiles.active:dev}")
	private String activeProfile;

	public OAuth2LoginSuccessHandler(JwtUtil jwtUtil, UserRepository userRepository) {
		this.jwtUtil = jwtUtil;
		this.userRepository = userRepository;
	}

	@Override
	public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
	        Authentication authentication) throws IOException, ServletException {

	    OAuth2User oAuth2User = (OAuth2User) authentication.getPrincipal();
	    String email = oAuth2User.getAttribute("email");
	    String name = oAuth2User.getAttribute("name");

	    try {
	        // 응답 커밋 상태 체크를 더 일찍
	        if (response.isCommitted()) {
	            System.err.println("응답이 이미 커밋되었습니다 - 쿠키 설정 불가!");
	            return;
	        }

	        Long userNo = userRepository.findByEmailAndIsActiveTrue(email)
	                .orElseThrow(() -> new IllegalArgumentException("사용자를 찾을 수 없습니다.")).getUserNo();

	        String jwtToken = jwtUtil.generateToken(userNo, name);
	        String refreshToken = jwtUtil.generateRefreshToken(userNo, name);

	        // 쿠키 설정을 리다이렉트 전에 먼저 수행
	        createAndAddJwtCookie(response, "jwt-token", jwtToken, 24 * 60 * 60, false);
	        createAndAddJwtCookie(response, "refresh-token", refreshToken, 7 * 24 * 60 * 60, true);

	        // 응답 헤더 강제 플러시
	        response.flushBuffer();
	        
	        System.out.println("=== 쿠키 설정 완료 ===");

	        String redirectUrl = buildRedirectUrl("http://localhost:8201/", "login", "success");
	        System.out.println("리다이렉트 URL: " + redirectUrl);

	        getRedirectStrategy().sendRedirect(request, response, redirectUrl);

	    } catch (Exception e) {
	        System.err.println("로그인 처리 실패: " + e.getMessage());
	        e.printStackTrace();

	        String errorUrl = buildRedirectUrl("http://localhost:8201/", "login", "error");
	        getRedirectStrategy().sendRedirect(request, response, errorUrl);
	    }
	}

	/**
	 * ✅ 수정된 JWT 쿠키 생성 메서드
	 */
	private void createAndAddJwtCookie(HttpServletResponse response, String name, String value, int maxAge, boolean httpOnly) {
		Cookie cookie = new Cookie(name, value);
		cookie.setHttpOnly(httpOnly);
		cookie.setPath("/");
		cookie.setMaxAge(maxAge);
		
		// ✅ 개발 환경에서는 setSecure(false)
		if ("dev".equalsIgnoreCase(activeProfile)) {
			cookie.setSecure(false);
		} else {
			cookie.setSecure(true);
		}


		System.out.println("쿠키 생성: " + name + " (경로: /, HttpOnly: " + httpOnly + ", MaxAge: " + maxAge + ", Secure: " + cookie.getSecure() + ")");
		
		response.addCookie(cookie);
	}

	/**
	 * 리다이렉트 URL 생성 (파라미터 포함)
	 */
	private String buildRedirectUrl(String baseUrl, String paramName, String paramValue) {
		try {
			String encodedValue = URLEncoder.encode(paramValue, StandardCharsets.UTF_8.toString());
			return baseUrl + "?" + paramName + "=" + encodedValue;
		} catch (Exception e) {
			System.err.println("URL 인코딩 실패: " + e.getMessage());
			return baseUrl;
		}
	}
}